https://docs.python.org/3/library/sqlite3.html#sqlite3-tutorial 

First, we need to create a new database and open a database connection to allow sqlite3 to work with it. Call sqlite3.connect() to to create a connection to the database
emaildb.sqlite in the current working directory, implicitly creating it if it does not exist:


  import sqlite3
  conn = sqlite3.connect('emaildb.sqlite')
  
  
The returned Connection object "conn" represents the connection to the on-disk database. In order to execute SQL statements and fetch results from SQL queries, we will 
need to use a database cursor. Call conn.cursor() to create the Cursor:
 
 
  cur = conn.cursor()
  
  
A Cursor instance has some attributes and methods. por ejemplo: execute() o fetchone()
Now that we’ve got a database connection and a cursor, we can create a database table with columns. For simplicity, we can just use column names in the table declaration 
thanks to the flexible typing feature of SQLite, specifying the data types is optional. Execute the CREATE TABLE statement by calling cur.execute(...):
 
 
  cur.execute('''
CREATE TABLE Counts (email TEXT, count INTEGER)''')  


o es lo mismo decir:


  cur.execute("CREATE TABLE Counts (email TEXT, count INTEGER)")
  
  
"Counts" es el nombre de la tabla y luego entre parentesis van las columnas, donde puedo o no especificar el tipo de dato. 
Otras sentencias a analizar...
donde dice email ira un email ingresado por el usuario. Al pareces es peligroso poner ese tipo de strings, especialemnte los ingresados por el usuario, en SQL. Al 
signo de pregunta lo llaman "placeholder". Con eso se asejuran de que no ocurra una "SQL injection". SQL injection is a code injection technique that might destroy 
your database. SQL injection is one of the most common web hacking techniques.
SQL operations usually need to use values from Python variables. However, beware of using Python’s string operations to assemble queries, as they are vulnerable to 
SQL injection attacks. https://docs.python.org/3/library/sqlite3.html#sqlite3-placeholders
An SQL statement may use one of two kinds of placeholders: question marks (qmark style) or named placeholders (named style).


  cur.execute('SELECT count FROM Counts WHERE email = ? ', (email,))    
  

entonces tengo un placeholder "?" que en ultima instancia sera reemplazado por el email. In Python, Placeholder is a word, characters or a string of characters to
hold a temporary place. Otro ejemplo seria: cursor.execute("INSERT INTO table VALUES (?, ?, ?)", (var1, var2, var3)) donde var1 es una variable de python.


Ahora porque lo pone como (email,)....NOSE la sintaxis dice que debe ir un tuple. esto es un tuple con una sola cosa (email,)
Generally*, the value passed to cursor.execute must wrapped in an ordered sequence such as a tuple or list even though the value itself is a singleton, so we must 
provide a single element tuple, like this: (value,).



The INSERT statement implicitly opens a transaction, which needs to be committed before changes are saved in the database (see Transaction control for details). Call
conn.commit() on the connection object to commit the transaction



CODIGO para counting email in a database
------------------------------------------------------------------------------------------------------------
#Access data stored in SQLite using Python. el codigo ----> https://www.py4e.com/code3/emaildb.py

import sqlite3

conn = sqlite3.connect("emaildb.sqlite")   #si no existe, crea una
cur = conn.cursor()    # ! mandamos y recibimos la info a traves de este cursor

cur.execute("DROP TABLE IF EXISTS Counts")
cur.execute("CREATE TABLE Counts (email TEXT, count INTEGER)")

# NOTE: hasta aca creo una tabla llamada Counts y le agrego dos columnas

fname = input('Enter file name: ')
if (len(fname) < 1): fname = 'mbox-short.txt'    #http://data.pr4e.org/mbox-short.txt
fh = open(fname)
for line in fh:
    if not line.startswith('From: '): continue
    pieces = line.split()    # te guarda las palabras por ej: From: stephen.marquard@uct.ac.za
    email = pieces[1]        # [0]= From: ; [1]= stephen.marquard@uct.ac.za
    cur.execute('SELECT count FROM Counts WHERE email = ? ', (email,)) # aca es como cuando abre un archivo, pero abre un record
    row = cur.fetchone()    #Return the next row of a query result set as a tuple. Return None if no more data is available.
    if row is None:
        cur.execute('''INSERT INTO Counts (email, count)
                VALUES (?, 1)''', (email,))
# si row es NONE, osea que es la primera vez que aparece el mail, contar 1. sino contar count + 1
    else:
        cur.execute('UPDATE Counts SET count = count + 1 WHERE email = ?', (email,))
    conn.commit()

# https://www.sqlite.org/lang_select.html
sqlstr = 'SELECT email, count FROM Counts ORDER BY count DESC LIMIT 10'

for row in cur.execute(sqlstr):
    print(str(row[0]), row[1])    # row[0] sera el email y row[1] sera el count

cur.close()   #cerras la conexion



#para correr esto desde la terminal.
#cd desktop ---> cd atom ---> dir --->nombre.py
---------------------------------------------------------------------------------------------------------
